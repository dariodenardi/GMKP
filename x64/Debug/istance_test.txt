6 //numero di elementi
[100,49,36,15,18,15] //profitti
[15,10,9,4,5,5] //pesi
2 //numero di zaini
[30, 12] //capacit√†
2 //numero di classi
[1, 2] //valore di setup
[0,1,3,5] //classe 1
[2,4] //classe 2

// read instance
	std::ifstream file("C:/Users/dario/source/repos/GMKP/GMKP/x64/Debug/istance_test.txt");
	if (file.is_open()) {
		string line;
		getline(file, line);

		n = atoi(line.substr(0, 1).c_str());
		p = (int *)malloc(sizeof(int)*n);
		w = (int *)malloc(sizeof(int)*n);
		std::cout << "numero di elementi: " << n << "\n";

		getline(file, line);
		string numberTemp;
		if (strcmp(line.substr(0, 1).c_str(), "[") != 0) {
			// errore nella struttura del file
		}

		int i = 0, k = 1;
		while (i < n) {
			if (strcmp(line.substr(k, 1).c_str(), ",") == 0 || strcmp(line.substr(k, 1).c_str(), "]") == 0) {
				p[i] = atoi(numberTemp.c_str());
				std::cout << "elemento array p: " << p[i] << "\n";
				numberTemp = "";
				i++;
			}
			else {
				numberTemp += line.substr(k, 1).c_str();
			}
			k++;
		}

		getline(file, line);

		if (strcmp(line.substr(0, 1).c_str(), "[") != 0) {
			// errore nella struttura del file
		}

		i = 0, k = 1;
		while (i < n) {
			if (strcmp(line.substr(k, 1).c_str(), ",") == 0 || strcmp(line.substr(k, 1).c_str(), "]") == 0) {
				w[i] = atoi(numberTemp.c_str());
				std::cout << "elemento array w: " << w[i] << "\n";
				numberTemp = "";
				i++;
			}
			else {
				numberTemp += line.substr(k, 1).c_str();
			}
			k++;
		}

		getline(file, line);
		m = atoi(line.substr(0, 1).c_str());
		C = (int *)malloc(sizeof(int)*m);
		std::cout << "numero di zaini: " << m << "\n";

		getline(file, line);

		if (strcmp(line.substr(0, 1).c_str(), "[") != 0) {
			// errore nella struttura del file
		}

		i = 0, k = 1;
		while (i < m) {
			if (strcmp(line.substr(k, 1).c_str(), ",") == 0 || strcmp(line.substr(k, 1).c_str(), "]") == 0) {
				c[i] = atoi(numberTemp.c_str());
				std::cout << "elemento array c: " << c[i] << "\n";
				numberTemp = "";
				i++;
			}
			else {
				numberTemp += line.substr(k, 1).c_str();
			}
			k++;
		}

		getline(file, line);
		r = atoi(line.substr(0, 1).c_str());
		s = (int *)malloc(sizeof(int)*r);
		std::cout << "numero di classi: " << r << "\n";

		getline(file, line);

		if (strcmp(line.substr(0, 1).c_str(), "[") != 0) {
			// errore nella struttura del file
		}

		i = 0, k = 1;
		while (i < r) {
			if (strcmp(line.substr(k, 1).c_str(), ",") == 0 || strcmp(line.substr(k, 1).c_str(), "]") == 0) {
				s[i] = atoi(numberTemp.c_str());
				std::cout << "elemento array s: " << s[i] << "\n";
				numberTemp = "";
				i++;
			}
			else {
				numberTemp += line.substr(k, 1).c_str();
			}
			k++;
		}

		Rk = (int **)malloc(sizeof(int)*r);
		Rk[0] = (int *)malloc(sizeof(int) * 4);
		Rk[0][0] = 0;
		Rk[0][1] = 1;
		Rk[0][2] = 3;
		Rk[0][3] = 5;
		Rk[1] = (int *)malloc(sizeof(int) * 2);
		Rk[1][0] = 2;
		Rk[1][1] = 4;

		free(Rk);
	}
	else {
		std::cout << "Errore nell'apertura del file";
		exit(1);
	}